services:
  laravel-producer:
    build:
      context: ./laravel-producer
      dockerfile: Dockerfile
    container_name: laravel-producer
    ports:
      - "7000:7000"
    volumes:
      - ./laravel-producer:/var/www/html
    command: >
      sh -c "cp .env.example .env &&
             composer install --no-interaction &&
             php artisan key:generate &&
             php artisan serve --host=0.0.0.0 --port=7000"
    networks:
      - backend

  laravel-consumer-one:
    build:
      context: ./laravel-consumer-one
      dockerfile: Dockerfile
    container_name: laravel-consumer-one
    depends_on:
      - timescaledb
      - kafka
    ports:
      - "8000:8000"
    volumes:
      - ./laravel-consumer-one:/var/www/html
    command: >
      sh -c "cp .env.example .env &&
             composer install --no-interaction &&
             php artisan key:generate &&
             php artisan app:kafka-listen"
    networks:
      - backend
#
#  laravel-consumer-two:
#    build:
#      context: ./laravel-consumer-two
#      dockerfile: Dockerfile
#    container_name: laravel-consumer-two
#    depends_on:
#      - mysql
#      - kafka
#    ports:
#      - "9000:9000"
#    volumes:
#      - ./laravel-consumer-two:/var/www/html
#    command: >
#      sh -c "cp .env.example .env &&
#             composer install --no-interaction &&
#             php artisan key:generate &&
#             php artisan serve --host=0.0.0.0 --port=9000 &&
#             php artisan app:kafka-listen"
#    networks:
#      - backend

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gps_data
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=7d4ICZ7uROW94dA5ud_04g
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - backend

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   ports:
  #     - "8085:8080"  # Host:Container
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092  # depends on your Kafka container name
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=  # Leave empty for KRaft
  #   depends_on:
  #     - kafka

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: kafka
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - backend

networks:
  backend:

volumes:
  db_data:
  timescale_data:
