services:
  gps-data-producer-image:
    build:
      context: gps-data-producer
      dockerfile: Dockerfile
    container_name: gps-data-producer-image
    image: gps-data-producer-image

  avg-speed-checker-image:
    build:
      context: avg-speed-checker
      dockerfile: Dockerfile
    container_name: avg-speed-checker-image
    image: avg-speed-checker-image

  over-speed-notifier-image:
    build:
      context: over-speed-notifier
      dockerfile: Dockerfile
    container_name: over-speed-notifier-image
    image: over-speed-notifier-image

  avg-speed-checker-migration:
    image: avg-speed-checker-image   # already has vendor baked in
    container_name: avg-speed-checker-migration
    depends_on:
      - timescaledb
    command: sh /usr/local/bin/commands/check-db-status-and-migrate.sh
    networks:
      - backend
    volumes:
      - ./commands/:/usr/local/bin/commands

  over-speed-notifier-migration:
    image: over-speed-notifier-image  # already has vendor baked in
    container_name: over-speed-notifier-migration
    depends_on:
      - timescaledb
#      - avg-speed-checker-migration
    command: sh /usr/local/bin/commands/check-db-status-and-migrate.sh
    networks:
      - backend
    volumes:
      - ./commands/:/usr/local/bin/commands

  gps-data-producer:
    image: gps-data-producer-image
    container_name: gps-data-producer
    command: >
      sh -c "php artisan serve --host=0.0.0.0 --port=7000"
    ports:
      - "7000:7000"
    networks:
      - backend

  avg-speed-checker:
    container_name: avg-speed-checker
    image: avg-speed-checker-image
    depends_on:
      - kafka-init
    command: sh /usr/local/bin/commands/avg-speed-checker-migration-check.sh
    ports:
      - "8000:8000"
    volumes:
      - ./commands/:/usr/local/bin/commands
    networks:
      - backend

  over-speed-notifier:
    container_name: over-speed-notifier
    image: over-speed-notifier-image
    depends_on:
      - kafka-init
    command: sh /usr/local/bin/commands/over-speed-notifier-migration-check.sh
    ports:
      - "9000:9000"
    volumes:
      - ./commands/:/usr/local/bin/commands
    networks:
      - backend

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gps_data
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=7d4ICZ7uROW94dA5ud_04g
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER:
    depends_on:
      - kafka
    networks:
      - backend

  kafka-init:
    image: bitnami/kafka:latest
    container_name: kafka-topic-creator
    depends_on:
      - kafka
    volumes:
      - ./create-kafka-topic.sh:/create-kafka-topic.sh
    entrypoint: [ "sh", "/create-kafka-topic.sh" ]
    networks:
      - backend

networks:
  backend:

volumes:
  timescale_data:
